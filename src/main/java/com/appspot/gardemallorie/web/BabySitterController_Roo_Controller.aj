// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.appspot.gardemallorie.web;

import java.io.UnsupportedEncodingException;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

import com.appspot.gardemallorie.domain.BabySitter;
import com.appspot.gardemallorie.service.BabySitterService;

privileged aspect BabySitterController_Roo_Controller {
    
    @Autowired
    BabySitterService BabySitterController.babySitterService;
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String BabySitterController.create(@Valid BabySitter babySitter, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, babySitter);
            return "babysitters/create";
        }
        uiModel.asMap().clear();
        babySitterService.saveBabySitter(babySitter);
        return "redirect:/babysitters/" + encodeUrlPathSegment(babySitter.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String BabySitterController.createForm(Model uiModel) {
        populateEditForm(uiModel, new BabySitter());
        return "babysitters/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String BabySitterController.show(@PathVariable("id") Long id, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("babysitter", babySitterService.findBabySitter(id));
        uiModel.addAttribute("itemId", id);
        return "babysitters/show";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String BabySitterController.update(@Valid BabySitter babySitter, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, babySitter);
            return "babysitters/update";
        }
        uiModel.asMap().clear();
        babySitterService.updateBabySitter(babySitter);
        return "redirect:/babysitters/" + encodeUrlPathSegment(babySitter.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String BabySitterController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        populateEditForm(uiModel, babySitterService.findBabySitter(id));
        return "babysitters/update";
    }
    
    void BabySitterController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("babySitter_extrahoursbeginning_date_format", "HH:mm");
    }
    
    void BabySitterController.populateEditForm(Model uiModel, BabySitter babySitter) {
        uiModel.addAttribute("babySitter", babySitter);
        addDateTimeFormatPatterns(uiModel);
    }
    
    String BabySitterController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
