// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.appspot.gardemallorie.web;

import com.appspot.gardemallorie.domain.BabySitter;
import com.appspot.gardemallorie.domain.BabySitting;
import com.appspot.gardemallorie.web.BabySittingController;
import java.util.Date;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

privileged aspect BabySittingController_Roo_Controller_Finder {
    
    @RequestMapping(params = { "find=ByBabySitter", "form" }, method = RequestMethod.GET)
    public String BabySittingController.findBabySittingsByBabySitterForm(Model uiModel) {
        uiModel.addAttribute("babysitters", BabySitter.findAllBabySitters());
        return "babysittings/findBabySittingsByBabySitter";
    }
    
    @RequestMapping(params = "find=ByBabySitter", method = RequestMethod.GET)
    public String BabySittingController.findBabySittingsByBabySitter(@RequestParam("babySitter") BabySitter babySitter, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("babysittings", BabySitting.findBabySittingsByBabySitter(babySitter, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) BabySitting.countFindBabySittingsByBabySitter(babySitter) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("babysittings", BabySitting.findBabySittingsByBabySitter(babySitter, sortFieldName, sortOrder).getResultList());
        }
        addDateTimeFormatPatterns(uiModel);
        return "babysittings/list";
    }
    
    @RequestMapping(params = { "find=ByBack", "form" }, method = RequestMethod.GET)
    public String BabySittingController.findBabySittingsByBackForm(Model uiModel) {
        uiModel.addAttribute("babysitters", BabySitter.findAllBabySitters());
        return "babysittings/findBabySittingsByBack";
    }
    
    @RequestMapping(params = "find=ByBack", method = RequestMethod.GET)
    public String BabySittingController.findBabySittingsByBack(@RequestParam("back") BabySitter back, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("babysittings", BabySitting.findBabySittingsByBack(back, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) BabySitting.countFindBabySittingsByBack(back) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("babysittings", BabySitting.findBabySittingsByBack(back, sortFieldName, sortOrder).getResultList());
        }
        addDateTimeFormatPatterns(uiModel);
        return "babysittings/list";
    }
    
    @RequestMapping(params = { "find=ByDayBetween", "form" }, method = RequestMethod.GET)
    public String BabySittingController.findBabySittingsByDayBetweenForm(Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        return "babysittings/findBabySittingsByDayBetween";
    }
    
    @RequestMapping(params = "find=ByDayBetween", method = RequestMethod.GET)
    public String BabySittingController.findBabySittingsByDayBetween(@RequestParam("minDay") @DateTimeFormat(pattern = "yyyy-MM-dd") Date minDay, @RequestParam("maxDay") @DateTimeFormat(pattern = "yyyy-MM-dd") Date maxDay, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("babysittings", BabySitting.findBabySittingsByDayBetween(minDay, maxDay, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) BabySitting.countFindBabySittingsByDayBetween(minDay, maxDay) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("babysittings", BabySitting.findBabySittingsByDayBetween(minDay, maxDay, sortFieldName, sortOrder).getResultList());
        }
        addDateTimeFormatPatterns(uiModel);
        return "babysittings/list";
    }
    
    @RequestMapping(params = { "find=ByDayGreaterThanEquals", "form" }, method = RequestMethod.GET)
    public String BabySittingController.findBabySittingsByDayGreaterThanEqualsForm(Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        return "babysittings/findBabySittingsByDayGreaterThanEquals";
    }
    
    @RequestMapping(params = "find=ByDayGreaterThanEquals", method = RequestMethod.GET)
    public String BabySittingController.findBabySittingsByDayGreaterThanEquals(@RequestParam("day") @DateTimeFormat(pattern = "yyyy-MM-dd") Date day, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("babysittings", BabySitting.findBabySittingsByDayGreaterThanEquals(day, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) BabySitting.countFindBabySittingsByDayGreaterThanEquals(day) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("babysittings", BabySitting.findBabySittingsByDayGreaterThanEquals(day, sortFieldName, sortOrder).getResultList());
        }
        addDateTimeFormatPatterns(uiModel);
        return "babysittings/list";
    }
    
    @RequestMapping(params = { "find=ByDayLessThanEquals", "form" }, method = RequestMethod.GET)
    public String BabySittingController.findBabySittingsByDayLessThanEqualsForm(Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        return "babysittings/findBabySittingsByDayLessThanEquals";
    }
    
    @RequestMapping(params = "find=ByDayLessThanEquals", method = RequestMethod.GET)
    public String BabySittingController.findBabySittingsByDayLessThanEquals(@RequestParam("day") @DateTimeFormat(pattern = "yyyy-MM-dd") Date day, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("babysittings", BabySitting.findBabySittingsByDayLessThanEquals(day, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) BabySitting.countFindBabySittingsByDayLessThanEquals(day) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("babysittings", BabySitting.findBabySittingsByDayLessThanEquals(day, sortFieldName, sortOrder).getResultList());
        }
        addDateTimeFormatPatterns(uiModel);
        return "babysittings/list";
    }
    
    @RequestMapping(params = { "find=ByGo", "form" }, method = RequestMethod.GET)
    public String BabySittingController.findBabySittingsByGoForm(Model uiModel) {
        uiModel.addAttribute("babysitters", BabySitter.findAllBabySitters());
        return "babysittings/findBabySittingsByGo";
    }
    
    @RequestMapping(params = "find=ByGo", method = RequestMethod.GET)
    public String BabySittingController.findBabySittingsByGo(@RequestParam("go") BabySitter go, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("babysittings", BabySitting.findBabySittingsByGo(go, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) BabySitting.countFindBabySittingsByGo(go) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("babysittings", BabySitting.findBabySittingsByGo(go, sortFieldName, sortOrder).getResultList());
        }
        addDateTimeFormatPatterns(uiModel);
        return "babysittings/list";
    }
    
}
