// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.appspot.gardemallorie.domain;

import com.appspot.gardemallorie.domain.BabySitter;
import com.appspot.gardemallorie.domain.BabySitting;
import java.util.Date;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect BabySitting_Roo_Finder {
    
    public static Long BabySitting.countFindBabySittingsByBabySitter(BabySitter babySitter) {
        if (babySitter == null) throw new IllegalArgumentException("The babySitter argument is required");
        EntityManager em = BabySitting.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM BabySitting AS o WHERE o.babySitter = :babySitter", Long.class);
        q.setParameter("babySitter", babySitter);
        return ((Long) q.getSingleResult());
    }
    
    public static Long BabySitting.countFindBabySittingsByBack(BabySitter back) {
        if (back == null) throw new IllegalArgumentException("The back argument is required");
        EntityManager em = BabySitting.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM BabySitting AS o WHERE o.back = :back", Long.class);
        q.setParameter("back", back);
        return ((Long) q.getSingleResult());
    }
    
    public static Long BabySitting.countFindBabySittingsByDayBetween(Date minDay, Date maxDay) {
        if (minDay == null) throw new IllegalArgumentException("The minDay argument is required");
        if (maxDay == null) throw new IllegalArgumentException("The maxDay argument is required");
        EntityManager em = BabySitting.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM BabySitting AS o WHERE o.day BETWEEN :minDay AND :maxDay", Long.class);
        q.setParameter("minDay", minDay);
        q.setParameter("maxDay", maxDay);
        return ((Long) q.getSingleResult());
    }
    
    public static Long BabySitting.countFindBabySittingsByDayGreaterThanEquals(Date day) {
        if (day == null) throw new IllegalArgumentException("The day argument is required");
        EntityManager em = BabySitting.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM BabySitting AS o WHERE o.day >= :day", Long.class);
        q.setParameter("day", day);
        return ((Long) q.getSingleResult());
    }
    
    public static Long BabySitting.countFindBabySittingsByDayLessThanEquals(Date day) {
        if (day == null) throw new IllegalArgumentException("The day argument is required");
        EntityManager em = BabySitting.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM BabySitting AS o WHERE o.day <= :day", Long.class);
        q.setParameter("day", day);
        return ((Long) q.getSingleResult());
    }
    
    public static Long BabySitting.countFindBabySittingsByGo(BabySitter go) {
        if (go == null) throw new IllegalArgumentException("The go argument is required");
        EntityManager em = BabySitting.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM BabySitting AS o WHERE o.go = :go", Long.class);
        q.setParameter("go", go);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<BabySitting> BabySitting.findBabySittingsByBabySitter(BabySitter babySitter) {
        if (babySitter == null) throw new IllegalArgumentException("The babySitter argument is required");
        EntityManager em = BabySitting.entityManager();
        TypedQuery<BabySitting> q = em.createQuery("SELECT o FROM BabySitting AS o WHERE o.babySitter = :babySitter", BabySitting.class);
        q.setParameter("babySitter", babySitter);
        return q;
    }
    
    public static TypedQuery<BabySitting> BabySitting.findBabySittingsByBabySitter(BabySitter babySitter, String sortFieldName, String sortOrder) {
        if (babySitter == null) throw new IllegalArgumentException("The babySitter argument is required");
        EntityManager em = BabySitting.entityManager();
        String jpaQuery = "SELECT o FROM BabySitting AS o WHERE o.babySitter = :babySitter";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<BabySitting> q = em.createQuery(jpaQuery, BabySitting.class);
        q.setParameter("babySitter", babySitter);
        return q;
    }
    
    public static TypedQuery<BabySitting> BabySitting.findBabySittingsByBack(BabySitter back) {
        if (back == null) throw new IllegalArgumentException("The back argument is required");
        EntityManager em = BabySitting.entityManager();
        TypedQuery<BabySitting> q = em.createQuery("SELECT o FROM BabySitting AS o WHERE o.back = :back", BabySitting.class);
        q.setParameter("back", back);
        return q;
    }
    
    public static TypedQuery<BabySitting> BabySitting.findBabySittingsByBack(BabySitter back, String sortFieldName, String sortOrder) {
        if (back == null) throw new IllegalArgumentException("The back argument is required");
        EntityManager em = BabySitting.entityManager();
        String jpaQuery = "SELECT o FROM BabySitting AS o WHERE o.back = :back";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<BabySitting> q = em.createQuery(jpaQuery, BabySitting.class);
        q.setParameter("back", back);
        return q;
    }
    
    public static TypedQuery<BabySitting> BabySitting.findBabySittingsByDayBetween(Date minDay, Date maxDay) {
        if (minDay == null) throw new IllegalArgumentException("The minDay argument is required");
        if (maxDay == null) throw new IllegalArgumentException("The maxDay argument is required");
        EntityManager em = BabySitting.entityManager();
        TypedQuery<BabySitting> q = em.createQuery("SELECT o FROM BabySitting AS o WHERE o.day BETWEEN :minDay AND :maxDay", BabySitting.class);
        q.setParameter("minDay", minDay);
        q.setParameter("maxDay", maxDay);
        return q;
    }
    
    public static TypedQuery<BabySitting> BabySitting.findBabySittingsByDayBetween(Date minDay, Date maxDay, String sortFieldName, String sortOrder) {
        if (minDay == null) throw new IllegalArgumentException("The minDay argument is required");
        if (maxDay == null) throw new IllegalArgumentException("The maxDay argument is required");
        EntityManager em = BabySitting.entityManager();
        String jpaQuery = "SELECT o FROM BabySitting AS o WHERE o.day BETWEEN :minDay AND :maxDay";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<BabySitting> q = em.createQuery(jpaQuery, BabySitting.class);
        q.setParameter("minDay", minDay);
        q.setParameter("maxDay", maxDay);
        return q;
    }
    
    public static TypedQuery<BabySitting> BabySitting.findBabySittingsByDayGreaterThanEquals(Date day) {
        if (day == null) throw new IllegalArgumentException("The day argument is required");
        EntityManager em = BabySitting.entityManager();
        TypedQuery<BabySitting> q = em.createQuery("SELECT o FROM BabySitting AS o WHERE o.day >= :day", BabySitting.class);
        q.setParameter("day", day);
        return q;
    }
    
    public static TypedQuery<BabySitting> BabySitting.findBabySittingsByDayGreaterThanEquals(Date day, String sortFieldName, String sortOrder) {
        if (day == null) throw new IllegalArgumentException("The day argument is required");
        EntityManager em = BabySitting.entityManager();
        String jpaQuery = "SELECT o FROM BabySitting AS o WHERE o.day >= :day";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<BabySitting> q = em.createQuery(jpaQuery, BabySitting.class);
        q.setParameter("day", day);
        return q;
    }
    
    public static TypedQuery<BabySitting> BabySitting.findBabySittingsByDayLessThanEquals(Date day) {
        if (day == null) throw new IllegalArgumentException("The day argument is required");
        EntityManager em = BabySitting.entityManager();
        TypedQuery<BabySitting> q = em.createQuery("SELECT o FROM BabySitting AS o WHERE o.day <= :day", BabySitting.class);
        q.setParameter("day", day);
        return q;
    }
    
    public static TypedQuery<BabySitting> BabySitting.findBabySittingsByDayLessThanEquals(Date day, String sortFieldName, String sortOrder) {
        if (day == null) throw new IllegalArgumentException("The day argument is required");
        EntityManager em = BabySitting.entityManager();
        String jpaQuery = "SELECT o FROM BabySitting AS o WHERE o.day <= :day";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<BabySitting> q = em.createQuery(jpaQuery, BabySitting.class);
        q.setParameter("day", day);
        return q;
    }
    
    public static TypedQuery<BabySitting> BabySitting.findBabySittingsByGo(BabySitter go) {
        if (go == null) throw new IllegalArgumentException("The go argument is required");
        EntityManager em = BabySitting.entityManager();
        TypedQuery<BabySitting> q = em.createQuery("SELECT o FROM BabySitting AS o WHERE o.go = :go", BabySitting.class);
        q.setParameter("go", go);
        return q;
    }
    
    public static TypedQuery<BabySitting> BabySitting.findBabySittingsByGo(BabySitter go, String sortFieldName, String sortOrder) {
        if (go == null) throw new IllegalArgumentException("The go argument is required");
        EntityManager em = BabySitting.entityManager();
        String jpaQuery = "SELECT o FROM BabySitting AS o WHERE o.go = :go";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<BabySitting> q = em.createQuery(jpaQuery, BabySitting.class);
        q.setParameter("go", go);
        return q;
    }
    
}
